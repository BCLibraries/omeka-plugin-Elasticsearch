<?php

require_once __DIR__ . '/../../../libraries/Elasticsearch/Model/Query.php';

use PHPUnit\Framework\TestCase;

class Model_QueryTest extends TestCase
{
    /**
     * @var Elasticsearch_Model_Query
     */
    protected $query;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $aggs = $this->createMock(Elasticsearch_Model_AggregationList::class);
        $aggs->method('toArray')
            ->willReturn(['aggregation_list']);

        $subq1 = $this->createMock(Elasticsearch_Model_SubQuery::class);
        $subq1->method('toArray')
            ->willReturn(['subquery_1']);

        $subq2 = $this->createMock(Elasticsearch_Model_SubQuery::class);
        $subq2->method('toArray')
            ->willReturn(['subquery_2']);

        $subqueries = [$subq1, $subq2];

        $filter1 = $this->createMock(Elasticsearch_Model_SubQuery::class);
        $filter1->method('toArray')
            ->willReturn(['filter_1']);

        $filter2 = $this->createMock(Elasticsearch_Model_SubQuery::class);
        $filter2->method('toArray')
            ->willReturn(['filter_2']);

        $filters = [$filter1, $filter2];

        $this->query = new Elasticsearch_Model_Query($subqueries, $filters, $aggs);

    }

    public function testQueryBuildsArray(): void
    {
        $expected = [
            'query' => [
                'bool' => [
                    'must' => [['subquery_1'],['subquery_2']],
                    'filter' => [['filter_1'],['filter_2']]

                ]
            ],
            'aggregations' => ['aggregation_list']
        ];
        $this->assertEquals($expected, $this->query->toArray());
    }
}
