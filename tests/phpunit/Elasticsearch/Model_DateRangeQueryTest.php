<?php

require_once __DIR__ . '/../../../libraries/Elasticsearch/Model/SubQuery.php';
require_once __DIR__ . '/../../../libraries/Elasticsearch/Exception/BadQueryException.php';
require_once __DIR__ . '/../../../libraries/Elasticsearch/Model/DateRangeQuery.php';

use PHPUnit\Framework\TestCase;

class Model_DateRangeQueryTest extends TestCase
{
    /**
     * @var Elasticsearch_Model_DateRangeQuery
     */
    private $query;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->query = Elasticsearch_Model_DateRangeQuery::build('date');
    }

    public function testBuildCreatesDateRangeQuery(): void
    {
        $expected = [
            'range' => ['date' => []]
        ];
        $this->assertEquals($expected, $this->query->toArray());
    }

    public function testLessThanSetsLessThanValue(): void
    {
        $expected = [
            'range' => [
                'date' => [
                    'lt' => '2019'
                ]
            ]
        ];
        $this->query->lessThan('2019');
        $this->assertEquals($expected, $this->query->toArray());
    }

    public function testLessThanOrEqualToSetsLessThanOrEqualToValue(): void
    {
        $expected = [
            'range' => [
                'date' => [
                    'lte' => '2019'
                ]
            ]
        ];
        $this->query->lessThanOrEqualTo('2019');
        $this->assertEquals($expected, $this->query->toArray());
    }

    public function testGreaterThanSetsGreaterThanValue(): void
    {
        $expected = [
            'range' => [
                'date' => [
                    'gt' => '2015'
                ]
            ]
        ];
        $this->query->greaterThan('2015');
        $this->assertEquals($expected, $this->query->toArray());
    }

    public function testGreaterThanOrEqualToSetsGreaterThanOrEqualToValue(): void
    {
        $expected = [
            'range' => [
                'date' => [
                    'gte' => '2015'
                ]
            ]
        ];
        $this->query->greaterThanOrEqualTo('2015');
        $this->assertEquals($expected, $this->query->toArray());
    }

    public function testBadLessThanDateThrowsException(): void {
        $this->expectException(Elasticsearch_Exception_BadQueryException::class);
        $this->query->lessThan('09');
    }

    public function testBadLessThanOrEqualToDateThrowsException(): void {
        $this->expectException(Elasticsearch_Exception_BadQueryException::class);
        $this->query->lessThanOrEqualTo('Nineteen Ninety-Nine');
    }

    public function testBadGreaterThanDateThrowsException(): void {
        $this->expectException(Elasticsearch_Exception_BadQueryException::class);
        $this->query->greaterThan('01/01/2017');
    }

    public function testBadGreaterThanOrEqualToDateThrowsException(): void {
        $this->expectException(Elasticsearch_Exception_BadQueryException::class);
        $this->query->greaterThanOrEqualTo('1999-2001');
    }
}
