<?php

require_once __DIR__ . '/../../../libraries/Elasticsearch/Model/AggregationList.php';


use PHPUnit\Framework\TestCase;

class Model_AggregationListTest extends TestCase
{
    /**
     * @var Elasticsearch_Model_AggregationList
     */
    public $list;

    /**
     * @var Elasticsearch_Model_Aggregation
     */
    public $agg1;

    /**
     * @var Elasticsearch_Model_Aggregation
     */
    public $agg2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->list = new Elasticsearch_Model_AggregationList();

        $this->agg1 = $this->createMock(Elasticsearch_Model_Aggregation::class);
        $this->agg1->method('toArray')
            ->willReturn(['array_1']);

        $this->agg1->method('getName')
            ->willReturn('foo');


        $this->agg2 = $this->createMock(Elasticsearch_Model_Aggregation::class);
        $this->agg2->method('getName')
            ->willReturn('bar');

        $this->agg2->method('toArray')
            ->willReturn(['array_2']);
    }

    public function testListIsBuilt(): void
    {
        $this->assertEquals(new stdClass(), $this->list->toObject());
    }

    public function testCanAddAggregations(): void
    {
        $expected = new stdClass();
        $expected->foo = ['array_1'];
        $expected->bar = ['array_2'];

        $this->list->add($this->agg1);
        $this->list->add($this->agg2);
        $this->assertEquals($expected, $this->list->toObject());
    }

    public function testCanBuildWithAggregationsList(): void
    {
        $expected = new stdClass();
        $expected->foo = ['array_1'];
        $expected->bar = ['array_2'];

        $list = new Elasticsearch_Model_AggregationList([$this->agg1, $this->agg2]);
        $this->assertEquals($expected, $list->toObject());
    }
}
